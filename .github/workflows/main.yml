name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ar-image:
    name: Continuous Delivery
    needs: integration  # Depende de la integraciÃ³n
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure GCP credentials
        id: login-AR
        run: |
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > key.json
          gcloud auth activate-service-account --key-file=key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud auth configure-docker southamerica-west1-docker.pkg.dev

      - name: Build, tag, and push image to Artifact Repository
        id: build_image
        env:
          AR_REGISTRY: southamerica-west1-docker.pkg.dev
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          AR_REPOSITORY: ${{ secrets.AR_REPOSITORY_NAME }}
          IMAGE_NAME: my-image
          IMAGE_TAG: latest
        run: |
          docker build -t $AR_REGISTRY/$PROJECT_ID/$AR_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG .
          docker push $AR_REGISTRY/$PROJECT_ID/$AR_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG
          echo "image=$AR_REGISTRY/$PROJECT_ID/$AR_REPOSITORY/$IMAGE_NAME:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Clean up credentials
        run: rm -f key.json

      - name: Pull latest images from Artifact Registry
        run: |
          docker pull ${{ secrets.GCP_ARTIFACT_REGISTRY_URI }}/${{ secrets.AR_REPOSITORY_NAME }}:latest
      
      - name: Run Docker Image to serve users
        run: |
          docker run -d -p 8080:8080 --ipc="host" --name=networksecurity -e 'GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'
      
      - name: Clean previous images and containers
        run: |
          docker system prune -f
      